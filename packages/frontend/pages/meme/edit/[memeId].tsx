import { NextPage } from "next"
import Head from "next/head";
import { useRouter } from "next/router";
import { useEffect, useState } from "react";
import { Col, Container, Image, Row } from "react-bootstrap";
import { useAccount } from "wagmi";
import { GoBackButton } from "../../../components/Buttons/GoBackBtn";
import PageLayout from "../../../components/Layout";
import { ConfirmModal } from "../../../components/Modals/Confirm";
import { FeedbackModal } from "../../../components/Modals/Feedback";
import { delay } from "../../../utils/time";

type EditMemePageProps = {
    meme: any; //Meme
}

const EditMemePage: NextPage = (props: any) => {
    const { data } = useAccount();
    const [disabled, setDisabled] = useState(false);
    const [show, setShow] = useState(false);
    const [showConfirm, setShowConfirm] = useState(false);
    const [showFeedback, setShowFeedback] = useState(false);
    const router = useRouter();

    useEffect(() => {
        setDisabled(!data ? true : false)
    }, [data])

    const imageControllBtns = [
        {
            src: "",
            handleClick: () => {

            }
        },
        {
            src: "",
            handleClick: () => {

            }
        }
    ]

    const memeControllBtns = [
        {
            src: "/assets/icons/edit-meme-1.svg",
            handleClick: () => {

            }
        },
        {
            src: "/assets/icons/edit-meme-2.svg",
            handleClick: () => {

            }
        },
        {
            src: "/assets/icons/edit-meme-3.svg",
            handleClick: () => {

            }
        },
        {
            src: "/assets/icons/edit-meme-4.svg",
            handleClick: () => {

            }
        }
    ]

    const handleMemeText = (event) => {
        
    }

    const handleRemixMeme = () => {
        setShowConfirm(true);
    }

    const handleConfirmation = (status: boolean) => {
        setShowConfirm(false);

        if (!status) return;

        //TOOD Create meme here

        const createMemeService = async () => {
            await delay(1500);
            setShowFeedback(false);
            const createdMeme = { id: 2 }
            router.push(`/meme/${createdMeme.id}?created=true`);
        }

        setShowFeedback(true);
        createMemeService();
    }

    return (
        <div className='home-bg min-h-screen'>
            <Head>
                <title></title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
                <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;500;600;700;800&display=swap" rel="stylesheet" />
            </Head>
            <FeedbackModal show={showFeedback} />
            <ConfirmModal show={showConfirm} onConfirm={handleConfirmation} />
            <PageLayout>
                <Container fluid="md" className='h-full'>
                    <Row className='mb-4'>
                        <Col>
                            <GoBackButton route="/" />
                        </Col>
                    </Row>
                    <Row className='mt-auto'>
                        <Col>
                            <article className='space-y-10'>
                                <Row>
                                    <Col>
                                        <Row className='gap-6'>
                                            <Col sm="12" lg="7">
                                                <div className="comic-border bg-white p-10 rounded-4xl relative" onMouseEnter={() => { setShow(true) }} onMouseLeave={() => { setShow(false) }}>
                                                    {
                                                        show ?
                                                            <div className="flex absolute right-14 top-14 space-x-3">
                                                                {
                                                                    imageControllBtns.map((btn, i) => (
                                                                        <div key={"ibicon-" + i} onClick={btn.handleClick} className="rounded-full bg-white comic-border-mini flex items-center p-2 cursor-pointer">
                                                                            <Image src={btn.src} width="25" height="25" />
                                                                        </div>
                                                                    ))
                                                                }
                                                            </div>
                                                            : null
                                                    }
                                                    <Image src={props.meme.src} className="w-full h-auto rounded-xl" width="1600" height="1000" />
                                                </div>
                                            </Col>
                                            <Col sm="12" lg="4" className="comic-border bg-white p-10 rounded-4xl relative flex flex-col items-center w-full h-1/2">
                                                <p className="text-lg font-bold">MEMIXER CONTROLS</p>
                                                <input onChange={handleMemeText} className="border-2 border-black border-solid rounded-xl p-2 w-4/5 mb-4" placeholder="Text #1" type="text" />
                                                <div className="flex space-x-3 mb-4">
                                                    {
                                                        memeControllBtns.map((btn, i) => (
                                                            <div key={"mbicon-" + i} onClick={btn.handleClick} className="rounded-full bg-white comic-border-mini flex items-center p-2 cursor-pointer">
                                                                <Image src={btn.src} width="30" height="30" />
                                                            </div>
                                                        ))
                                                    }
                                                </div>
                                                <button onClick={handleRemixMeme} disabled={disabled} className={"create-btn-gradient rounded-full border-black border-solid border-4 px-16 sm:px-16 lg:px-20 py-3 text-lg font-bold absolute -bottom-10 " + (disabled ? "opacity-30" : "comic-border-mini")}>
                                                    REMIX
                                                </button>
                                            </Col>
                                        </Row>
                                    </Col>
                                </Row>
                            </article>
                        </Col>
                    </Row>
                </Container>

            </PageLayout>
        </div>
    )
}

export const getStaticProps = async ({ params }: any): Promise<{ props: EditMemePageProps }> => {

    //TODO retrieve memes from user with apollo

    const meme = {
        id: 1,
        src: "/assets/imgs/meme.png",
        mockProfile: {
            id: 1,
            name: "cryptopunk",
            profilePic: "/assets/imgs/punk.png"
        },
        remixCount: 210,
        publicationDate: new Date().getTime()
    }

    return {
        props: {
            meme: meme,
        }
    }

}

export async function getStaticPaths() {
    // TODO Get All the memes here to create all the static pages

    const memes = [
        {
            memeId: '1'
        },
        {
            memeId: '2'
        },
        {
            memeId: '3'
        },
        {
            memeId: '4'
        },
    ]

    return {
        paths: memes.map(meme => { return { params: { memeId: meme.memeId } } }),
        fallback: false
    }
}

export default EditMemePage
