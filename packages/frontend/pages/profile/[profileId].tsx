import type { NextPage } from 'next'
import Head from 'next/head'
import Image from 'next/image'
import { Col, Container, Row } from 'react-bootstrap'
import { useDispatch, useSelector } from 'react-redux'
import { useAccount } from 'wagmi'
import { GoBackButton } from '../../components/Buttons/GoBackBtn'
import PageLayout from '../../components/Layout'
import { ConnectionBox } from '../../components/Layout/ConnectionBox'
import { MemePreview } from '../../components/MemePreview'
import { LoginStatus } from '../../models/Connection/connection.model'
import { User } from '../../models/User/user.model'
import { removeUser } from '../../store/reducers/user.reducer'
import { getSimplifiedAddress } from '../../utils/text'

type ProfileProps = {
    profile: User;
}

const Profile: NextPage = (props: any) => {
    const { data } = useAccount();
    const user: User = useSelector((state: any) => state.user.selectedUser);
    const dispatch = useDispatch();

    console.log(props)

    const handleLogout = () => {
        dispatch(removeUser());
    }

    return (
        <div className='profile-bg min-h-screen'>
            <Head>
                <title></title>
                <meta name="description" content="Generated by create next app" />
                <link rel="icon" href="/favicon.ico" />
                <link rel="preconnect" href="https://fonts.googleapis.com" />
                <link rel="preconnect" href="https://fonts.gstatic.com" />
                <link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@300;400;500;600;700;800&display=swap" rel="stylesheet" />
            </Head>
            <PageLayout>
                <Container fluid="md">
                    <Row className='mb-4'>
                        <Col>
                        {
                            user.name ?
                                <GoBackButton route="/" />
                            :
                                <ConnectionBox status={LoginStatus.DISCONNECTED} />
                        } 
                        </Col>
                    </Row>
                    <Row>
                        <Col>
                            <article className='space-y-10 comic-border rounded-4xl p-20 bg-white relative'>
                                <header className='border-b-2 border-gray-200 border-solid pb-6'>
                                    <div className="flex items-center comic-border-mini border-4 bg-white border-black border-solid rounded-full comic-border-mini max-w-max absolute -top-16">
                                        <Image src={props.profile?.coverPicture?.uri || "/assets/icons/profile.svg"} width="115" height="115" />
                                    </div>
                                    <div className='flex items-center justify-between'>
                                        <Row>
                                            <Col>
                                                <h2 className='font-medium text-4xl'>{props.profile.name}</h2>
                                                <p className='font-medium text-xs'>{getSimplifiedAddress(props.profile.address || "")} â€¢ {props.profile.posts?.length || 0} memes created</p>
                                            </Col>
                                        </Row>
                                        <Row>
                                            <Col>
                                                <button onClick={handleLogout} className="comic-border-mini rounded-full bg-white px-4 py-1 max-h-10">
                                                    <div className='flex items-center space-x-3'>
                                                        <Image src="/assets/icons/logout.svg" width="20" height="20" />
                                                        <span className='font-medium'>Log out</span>
                                                    </div>
                                                </button>
                                            </Col>
                                        </Row>
                                    </div>
                                </header>
                                <section>
                                    <Row className='mb-4'>
                                        <Col>
                                            <h3>MEMES CREATED</h3>
                                        </Col>
                                    </Row>
                                    <Row className='justify-center'>
                                        {
                                            props.profile.posts.filter((p, i) => i < 3)
                                                .map((p, i) => (
                                                    <Col key={"prof-meme-" + i}>
                                                        <MemePreview meme={p} />
                                                    </Col>
                                                ))
                                        }
                                    </Row>
                                </section>
                            </article>
                        </Col>
                    </Row>
                </Container>
            </PageLayout>
        </div>
    )
}

export const getStaticProps = async ({ params }: any): Promise<{ props: ProfileProps }> => {

    //TODO retrieve memes from user with apollo

    const user: User = {
        name: "cryptopunk",
        address: "0xE0Aff1C05dA6aF0e6779fB04AbB872c511CA6332",
        posts: [
            {
                id: 1,
                src: "/assets/imgs/meme.png",
                remixCount: 210,
                publicationDate: new Date().getTime()
            },
            {
                id: 2,
                src: "/assets/imgs/distracted boyfriend.png",
                remixCount: 210,
                publicationDate: new Date().getTime()
            },
            {
                id: 3,
                src: "/assets/imgs/distracted boyfriend.png",
                remixCount: 210,
                publicationDate: new Date().getTime()
            },
        ],
        stats: {}
    }

    return {
        props: {
            profile: user,
        }
    }

}

export async function getStaticPaths() {
    return {
      paths: [{ params: { profileId: '1' } }],
      fallback: false
    }
  }

export default Profile
